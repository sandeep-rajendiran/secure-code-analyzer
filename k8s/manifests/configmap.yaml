apiVersion: v1
kind: ConfigMap
metadata:
  name: secure-code-analyzer-config
  namespace: secure-code-analyzer
  labels:
    app: secure-code-analyzer
    component: config
data:
  # Application Configuration
  NODE_ENV: "production"
  PORT: "3000"
  LOG_LEVEL: "info"
  
  # Database Configuration
  DATABASE_HOST: "postgresql-service"
  DATABASE_PORT: "5432"
  DATABASE_NAME: "secure_code_analyzer"
  DATABASE_POOL_SIZE: "10"
  DATABASE_SSL: "true"
  
  # Redis Configuration
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  
  # SonarQube Configuration
  SONARQUBE_URL: "http://sonarqube-service:9000"
  SONARQUBE_PROJECT_KEY: "secure-code-analyzer"
  SONARQUBE_ORGANIZATION: ""
  
  # Jenkins Configuration
  JENKINS_URL: "http://jenkins-service:8080"
  JENKINS_JOB: "secure-code-analyzer"
  
  # Security Configuration
  SECURITY_SCANNER_ENABLED: "true"
  SECURITY_THRESHOLD: "HIGH"
  SECURITY_REPORT_PATH: "/app/reports/security"
  
  # Analysis Configuration
  ANALYSIS_TIMEOUT: "300000"
  ANALYSIS_PARALLEL_JOBS: "4"
  ANALYSIS_RETENTION_DAYS: "90"
  
  # Notification Configuration
  WEBHOOK_ENABLED: "true"
  WEBHOOK_TIMEOUT: "30000"
  
  # Health Check Configuration
  HEALTH_CHECK_INTERVAL: "30000"
  HEALTH_CHECK_TIMEOUT: "5000"
  
  # Monitoring Configuration
  METRICS_ENABLED: "true"
  METRICS_PORT: "8080"
  METRICS_PATH: "/metrics"
  
  # Feature Flags
  FEATURE_DYNAMIC_ANALYSIS: "true"
  FEATURE_AUTOMATED_REMEDIATION: "true"
  FEATURE_COMPLIANCE_REPORTING: "true"
  FEATURE_REAL_TIME_SCANNING: "true"
  
  # Container Security
  CONTAINER_SCAN_ENABLED: "true"
  CONTAINER_REGISTRY: "localhost:5000"
  
  # Compliance Configuration
  COMPLIANCE_FRAMEWORKS: "NIST,ISO27001,PCIDSS"
  COMPLIANCE_REPORT_FORMAT: "json,html,pdf"
  
  app.properties: |
    # Application Properties
    app.name=Secure Code Analyzer
    app.version=1.0.0
    app.description=Enterprise DevSecOps Integration Platform
    
    # Scanner Configuration
    scanner.languages=javascript,typescript,python,java,go,docker
    scanner.max_file_size=50MB
    scanner.max_scan_time=300s
    scanner.parallel_scans=4
    
    # Security Rules
    security.rules.injection=enabled
    security.rules.xss=enabled
    security.rules.csrf=enabled
    security.rules.secrets=enabled
    security.rules.hardcoded_passwords=enabled
    security.rules.weak_crypto=enabled
    security.rules.insecure_transport=enabled
    
    # Quality Gates
    quality_gate.min_coverage=80
    quality_gate.max_critical_issues=0
    quality_gate.max_high_issues=2
    quality_gate.max_duplicated_lines=5
    
    # Integration Settings
    integration.github.enabled=true
    integration.gitlab.enabled=true
    integration.bitbucket.enabled=true
    integration.slack.enabled=true
    integration.jira.enabled=true
    integration.email.enabled=true

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: secure-code-analyzer-scripts
  namespace: secure-code-analyzer
  labels:
    app: secure-code-analyzer
    component: scripts
data:
  init-db.sh: |
    #!/bin/bash
    set -e
    
    echo "üîÑ Initializing database..."
    
    # Wait for PostgreSQL to be ready
    until pg_isready -h $DATABASE_HOST -p $DATABASE_PORT -U $DATABASE_USER; do
      echo "‚è≥ Waiting for PostgreSQL..."
      sleep 2
    done
    
    # Create database if it doesn't exist
    psql -h $DATABASE_HOST -p $DATABASE_PORT -U $DATABASE_USER -tc "SELECT 1 FROM pg_database WHERE datname = '$DATABASE_NAME'" | grep -q 1 || \
      psql -h $DATABASE_HOST -p $DATABASE_PORT -U $DATABASE_USER -c "CREATE DATABASE $DATABASE_NAME"
    
    # Run migrations
    npm run migrate
    
    echo "‚úÖ Database initialization completed"

  health-check.sh: |
    #!/bin/bash
    set -e
    
    # Check application health
    curl -f http://localhost:$PORT/health || exit 1
    
    # Check database connection
    pg_isready -h $DATABASE_HOST -p $DATABASE_PORT -U $DATABASE_USER || exit 1
    
    # Check Redis connection
    redis-cli -h $REDIS_HOST -p $REDIS_PORT ping | grep -q PONG || exit 1
    
    echo "‚úÖ Health check passed"

  backup.sh: |
    #!/bin/bash
    set -e
    
    BACKUP_DATE=$(date +%Y%m%d_%H%M%S)
    BACKUP_DIR="/app/backups"
    
    echo "üîÑ Starting backup process..."
    
    # Create backup directory
    mkdir -p $BACKUP_DIR
    
    # Backup database
    pg_dump -h $DATABASE_HOST -p $DATABASE_PORT -U $DATABASE_USER -d $DATABASE_NAME \
      --no-password --verbose --clean --no-owner --no-privileges \
      -f "$BACKUP_DIR/database_$BACKUP_DATE.sql"
    
    # Backup configuration
    cp -r /app/config "$BACKUP_DIR/config_$BACKUP_DATE"
    
    # Backup reports (last 7 days)
    find /app/reports -type f -mtime -7 | tar -czf "$BACKUP_DIR/reports_$BACKUP_DATE.tar.gz" -T -
    
    # Cleanup old backups (keep last 10)
    ls -t $BACKUP_DIR/database_*.sql | tail -n +11 | xargs rm -f
    ls -t $BACKUP_DIR/config_* | tail -n +11 | xargs rm -rf
    ls -t $BACKUP_DIR/reports_*.tar.gz | tail -n +11 | xargs rm -f
    
    echo "‚úÖ Backup completed: $BACKUP_DATE"

  security-scan.sh: |
    #!/bin/bash
    set -e
    
    echo "üîí Running security scan..."
    
    # Run static analysis
    node src/scanners/security-scanner.js --target /app/src --format json --output /app/reports/security-scan.json
    
    # Run dependency scan
    npm audit --json > /app/reports/npm-audit.json || true
    
    # Run container scan if Docker is available
    if command -v docker &> /dev/null; then
      echo "üê≥ Running container security scan..."
      trivy image --format json --output /app/reports/container-scan.json $CONTAINER_IMAGE || true
    fi
    
    # Generate summary report
    node scripts/generate-security-summary.js
    
    echo "‚úÖ Security scan completed"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: secure-code-analyzer
  labels:
    app: secure-code-analyzer
    component: nginx
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;

    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }

    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for"';
        access_log /var/log/nginx/access.log main;

        # Security headers
        add_header X-Frame-Options SAMEORIGIN always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Performance
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 50M;

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
            application/atom+xml
            application/javascript
            application/json
            application/ld+json
            application/manifest+json
            application/rss+xml
            application/vnd.geo+json
            application/vnd.ms-fontobject
            application/x-font-ttf
            application/x-web-app-manifest+json
            application/xhtml+xml
            application/xml
            font/opentype
            image/bmp
            image/svg+xml
            image/x-icon
            text/cache-manifest
            text/css
            text/plain
            text/vcard
            text/vnd.rim.location.xloc
            text/vtt
            text/x-component
            text/x-cross-domain-policy;

        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;

        upstream backend {
            server secure-code-analyzer-service:3000;
            keepalive 32;
        }

        server {
            listen 80;
            server_name _;
            return 301 https://$server_name$request_uri;
        }

        server {
            listen 443 ssl http2;
            server_name _;

            # SSL configuration (use proper certificates in production)
            ssl_certificate /etc/ssl/certs/server.crt;
            ssl_certificate_key /etc/ssl/private/server.key;
            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
            ssl_prefer_server_ciphers off;
            ssl_session_cache shared:SSL:10m;
            ssl_session_timeout 10m;

            # API endpoints
            location /api/ {
                limit_req zone=api burst=20 nodelay;
                proxy_pass http://backend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
            }

            # WebSocket support
            location /socket.io/ {
                proxy_pass http://backend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            # Health check
            location /health {
                proxy_pass http://backend;
                access_log off;
            }

            # Metrics (restrict access)
            location /metrics {
                allow 10.0.0.0/8;
                allow 172.16.0.0/12;
                allow 192.168.0.0/16;
                deny all;
                proxy_pass http://backend;
            }

            # Static files
            location /static/ {
                alias /usr/share/nginx/html/static/;
                expires 1y;
                add_header Cache-Control "public, immutable";
            }

            # Dashboard
            location / {
                proxy_pass http://backend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
            }

            # Security headers for specific paths
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header X-Content-Type-Options nosniff;
            }
        }
    }